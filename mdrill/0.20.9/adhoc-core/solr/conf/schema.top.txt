<?xml version="1.0" encoding="UTF-8" ?>
<schema name="example" version="1.4">
  <types>
   <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true" omitTermFreqAndPositions="true" omitPositions="true" />
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true" omitTermFreqAndPositions="true" />
    <fieldtype name="binary" class="solr.BinaryField"/>

    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0" omitTermFreqAndPositions="true" />
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0" omitTermFreqAndPositions="true" />
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"  omitTermFreqAndPositions="true" />
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0" omitTermFreqAndPositions="true" />

    <fieldType name="tint" class="solr.TrieIntField" precisionStep="0" omitNorms="true"  positionIncrementGap="0" omitTermFreqAndPositions="true" />
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="0" omitNorms="true"  positionIncrementGap="0" omitTermFreqAndPositions="true" />
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="0" omitNorms="true"  positionIncrementGap="0" omitTermFreqAndPositions="true" />
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true"  positionIncrementGap="0" omitTermFreqAndPositions="true" />

    <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0" omitTermFreqAndPositions="true" />
        <fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="0"  positionIncrementGap="0" omitTermFreqAndPositions="true" />


    <fieldType name="random" class="solr.RandomSortField" indexed="true" />

     <fieldType name="text" class="solr.TextField" positionIncrementGap="0" omitNorms="true"  omitTermFreqAndPositions="true"  omitPositions="true">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!--filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/-->
        <filter class="solr.LowerCaseFilterFactory"/>
        <!--filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/-->
      </analyzer>
      <analyzer type="query">
       <tokenizer class="solr.StandardTokenizerFactory"/>
        <!--filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/-->
        <filter class="solr.LowerCaseFilterFactory"/>
        <!--filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/-->
      </analyzer>
    </fieldType>
   
    <fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!--
        The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
        a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
        Attributes of the DelimitedPayloadTokenFilterFactory : 
         "delimiter" - a one character delimiter. Default is | (pipe)
	 "encoder" - how to encode the following value into a playload
	    float -> org.apache.lucene.analysis.payloads.FloatEncoder,
	    double -> org.apache.lucene.analysis.payloads.DoubleEncoder,
	    integer -> o.a.l.a.p.IntegerEncoder
	    identity -> o.a.l.a.p.IdentityEncoder
            Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
         -->
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldtype>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />
</types>


  <fields>
